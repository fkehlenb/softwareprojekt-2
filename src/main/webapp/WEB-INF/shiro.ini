#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]
# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

authc.loginUrl = /login.xhtml
authc.successUrl = /index.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml

ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
#passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

# DataSource Setup
#datasource = org.apache.shiro.jndi.JndiObjectFactory
#datasource.resourceName = java:app/jdbc/shiro-primefaces TODO Fix persistence
#datasource.resourceRef = true

# JDBC Realm
#jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
#jdbcRealm.authenticationQuery = SELECT password FROM person WHERE login = ?
#jdbcRealm.userRolesQuery = SELECT r.name FROM person p, role r, person_role pr WHERE pr.id_person = p.id and r.id = pr.id_role and p.login = ?
#jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.permissionsQuery = SELECT permission_name FROM ROLES_PERMISSIONS WHERE role_name = ?
#jdbcRealm.credentialsMatcher = $passwordMatcher
#jdbcRealm.dataSource = $datasource

#securityManager.realms = $jdbcRealm

# Filter Setup
[urls]
/javax.faces.resource/** = anon
/login.xhtml = authc
/logout = logout
/admin/** = authc, roles[admin]
#/** = authc, roles[user]


[users]
a = hw0, admin
t = rad, technologe, transport, user

# -----------------------------------------------------------------------------
# Roles with assigned permissions
#
# Each line conforms to the format defined in the
# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc
# -----------------------------------------------------------------------------
[roles]
# 'admin' role has all permissions, indicated by the wildcard '*'
admin = *
pkAdmin = prozessschritt, prozesskette
logisitk = auftrag, probe, traeger
technologe = probe, experimentierstation, probenzustand, pkzustand, pszustand
transport = tazustand
