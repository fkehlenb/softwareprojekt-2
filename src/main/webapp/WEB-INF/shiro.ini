[main]
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

authc.loginUrl = /login.xhtml
authc.successUrl = /index.xhtml
roles.unauthorizedUrl = /unauthorized.xhtml

ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

# DataSource Setup
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = java:app/jdbc/sfb
datasource.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = SELECT password FROM username WHERE login = ?
jdbcRealm.userRolesQuery =  SELECT role.name FROM User.roleList WHERE User.username = ?
jdbcRealm.permissionsLookupEnabled = false
jdbcRealm.credentialsMatcher = $passwordMatcheruser_roles
jdbcRealm.dataSource = $datasource

#securityManager.realms = $jdbcRealm

# Filter Setup
[urls]
/javax.faces.resource/** = anon
/login.xhtml = authc
/logout = logout
#/admin/** = authc, roles[admin]
#/** = authc, roles[user]
#/pkAdmin/** = authc, roles[pkAdmin]
#/logistik/** = authc, roles[logistik]


[users]
#a = hw0, admin
#t = tec, technologe
#l = log, logistik
#p = 1, pkAdmin
#tr = tra, transport

# -----------------------------------------------------------------------------
# Roles with assigned permissions
#
# Each line conforms to the format defined in the
# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc
# -----------------------------------------------------------------------------
[roles]
# 'admin' role has all permissions, indicated by the wildcard '*'
admin = *
pkAdmin = prozessschritt, prozesskette
logisitk = auftrag, probe, traeger
technologe = probe, experimentierstation, probenzustand, pkzustand, pszustand
transport = tazustand
