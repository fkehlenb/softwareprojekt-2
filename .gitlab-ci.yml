image: jboss/wildfly

stages:
  - build
  - package
  - deploy
  - test

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Verify merge requests using JDK13
verify:jdk13:
  <<: *verify

cache:
  paths:
    - .m2/repository/
    - target/

compile_pdf:
  stage: build
  image: timnn/texlive  # use a Docker image for LaTeX from https://hub.docker.com/
  script:
   - cd doc
   - pdflatex Architekturbeschreibung.tex   # build the pdf just as you would on your computer
  artifacts:
    paths:
      - doc/Architekturbeschreibung.pdf  # instruct GitLab to keep the main.pdf file

package_service:
  stage: package
  image: maven
  script:
    - mvn package
  artifacts:
    paths:
      - target  


pages:
  stage: deploy
  script:
    - mkdir public  # create a folder called public
    - mkdir public/apidocs
    - cp target/apidocs public/apidocs
    - cp doc/Architekturbeschreibung.pdf public/Architekturbeschreibung.pdf # copy the pdf file into the public folder
  artifacts:
    paths:
      - public  # instruct GitLab to keep the public folder
  only:
    - master  # deploy the pdf only for commits made to the master branch

test:
  image: maven
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS test

build:
  image: maven
  tags:
    - docker
  stage: build
  script:
    - apt update
    - apt install graphviz -y
    - mvn clean package
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: on_success
    paths:
      - "target/*.jar"

