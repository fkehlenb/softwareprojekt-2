Ein Begriffslexikon anlegen und entwickeln
Von der Aufgabe ausgehen, nicht von ihrer Lösung
Daten suchen, nicht Programmabl¨ aufe beschreiben
Abstraktionsebene nicht in einer Darstellung wechseln
Die Spezifikation nach Aspekten organisieren
Ein Mengengerüst bilden
Den Kunden (Benutzer) einbeziehen
Geeignete Sprachen und Werkzeuge verwenden
Die Spezifikation so früh wie möglich prüfen und dem
Konfigurationsmanagement unterstellen
Die Spezifikation intensiv verwenden

* Vorgehensempfehlung
Tabelle 2.1

** Abkürungen
| Typ           | Kürz |
|---------------+------|
| class         | -    |
| package       | pkg  |
| component     | cmp  |
| deployment    | dep  |
| use case      | uc   |
| activity      | act  |
| state machine | stm  |
| interaction   | sd   |


* Grundkonzepte
** Modell
Ein Modell liefert ein eine Ansicht eines Systemes
1. Einn Modell versammelt eine hierarchisch strukturierte Menge von Elementen.
2. Die Menge von Elementen beschreibt auf einer abstrakten Ebene das System zu einem
   bestimmten Zweck, es zeigt nur eine Sicht auf das System.
3. Das Modell beschreibt das System aus dieser Sicht vollständig.

** Kommentar
Rechteckt mit geknickter Ecke
Kann mir >1 Modellelemten Verbunden werden

Die UML definiert folgende Sprachpakete, nach denen sich auch die
Spezifikation untergliedert: Actions, Activities, Classes, Components,
Deployments, General Behavior, Information Flows, Interactions,
Models, Profiles, State Machines, Structures, UseCases, Templates.

** Compliance Level von UML
Siehe Abb. 3.26
L0: Klaasen, Packete  und Typen
L1: Communication, BasicBehavior, BasicInteraktion, Interfaces
L2: BehaviorStateMachines, Ports, 

** Ausdruck
Ist ein strukturierter Baum von Symbolen
Der endweder in Präfix oder infix Schreibweise ist

#+begin_example
prä: mal (plus (2, 7), 4)
inf: (2 + 7) * 4)
#+end_example

** Randbedinguen / constraint 
#+BEGIN_EXAMPLE
<constraint> ::= ‘{‘ [ <name> ‘:’ ] <Boolean­expression> ‘ }’

Entwickler entwickelt Entwicklungsobjet
            |
           XOR 
            |
Tester     tester Testobjekt
#+END_EXAMPLE
Ein Entwickler kann nur entwickelen oder testen, nie beides Gleichzeitig
Ist immer ein boolscher Ausdruck bsp: XOR

** DatenTyp
Ein Datentyp wird durch das Rechteckssymbol mit dem ihn identifizierenden Schlüsselwort
notiert, also «datatype» für einen Datentyp, «enumeration» oder «primitive» für die spe­
ziel len Datentypen „Primitiver Typ“ 

Wie eine Klasse kann ein Datentyp (mit Ausnahme des Primitiven Typs) Attribute und
Operationen enthalten. Im Unterschied zu einem Objekt sind Datentypen allerdings identi­
tätslos, das heißt, die Instanzen eines Datentyps sind gleich, wenn ihre Werte gleich sind.
Instanzen einer Klasse, also Objekte, sind dagegen auch dann unterschiedlich, wenn sie für
alle Attribute die gleichen Werte besitzen.

** Primitive Typ {bool, int, string, n}
Abwendung
ding : Integer[*] steht für eine nicht begrenzte menge an Dingen 

** Aufzählungstyp
Sind diskrete Werte, wie die Amplichter einer Ampel [rot, gelb, grün, rot-gelb}

** UML-Schlüsselworter 
| Wort              | Bedeutung                                                         |
|-------------------+-------------------------------------------------------------------|
| <<use>>           |                                                                   |
| <<realize>>       |                                                                   |
| <<import>>        |                                                                   |
| <<include>>       |                                                                   |
| <<extend>>        | beschreiben von optimalen Verhalten, trennung von notwenigem      |
| <<precondition>>  |                                                                   |
| <<postcondition>> |                                                                   |
| <<call>>          |                                                                   |
| <<create>>        |                                                                   |
| <<component>>     |                                                                   |
| <<all>>           |                                                                   |
| <<deploy>>        |                                                                   |                    |                                                                   |
| <<include>>       | Mit hilfre von include gemeinsames verhalten herausfaktoriesieren |
| <<model>>         |                                                                   |
| <<reference>>     |                                                                   |
| <<use>>           |                                                                   |
| <<when>>          |                                                                   |



** Definition einer Methode
- Welcher Ausschnitt der UML ist für mein Projekt sinnvoll?
- Welche Stereotypen werden in meinem Projekt benötigt?
- Wie werden die einzelnen Entwicklungsschritte mit der UML unterstützt?
- Wie stehen die Entwicklungsprodukte miteinander in Verbindung?

** Mittel zur Verfeinerung eines Use-Cases
- Use-Case-Beschreibungen, um weitere Informationen festzuhalten
- Aktivitätsdiagramme, um den Ablauf eines Use-Cases zu beschreiben
- Zustandsautomaten, um die Zustände des Systems während des
  Use-Case-Verlaufes zu modellieren
- Sequenzdiagramme, um die Interaktionen zwischen den Benutzern und
  dem System darzustellen
- Use-Case-Diagramme
Use­Case­Beschreibung und Aktivitätsdiagramme zur präzisen
Beschreibung eines Use­Cases aus. Zustandsautomaten verwenden wir in der Analyse eher
zur detaillierten Beschreibung von Objekten oder zur Modellierung der Vor­ und Nach­
bedingungen der Use­Cases

** Use-Case-Bedingung
- Der Name des Use-Cases
- Die Kurzbeschreibung (Die Erläuterung des Use-Cases in 1–2 Sätzen)
- Die Akteure
- Der fachliche Auslöser (Der Grund, warum der Benutzer den Use-Case  ausführt)
- Der normale Ablauf
- Die alternativen Abläufe
- Die Vor- und Nachbedingungen

** Aktivitätsdiagramme
In den Use Cases macht man sich über mogliche Abäufe gedanken, mit Aktivitätsdiagrammen
legt man diese genauer fest.
Modeliert werden Aktionen, welche vom System alleine, von einem Akteur oder beiden durchgeführt
werden. Um dies abzubilden greift man endweder auf Aktivitätsbereiche zurück oder man schreibt
Akteure in Klammern über deren Aktionsnamen

*** Include und Ecxlude
*** Verwenden von Kommentaren
Erstellen Sie zu jeder Aktion eine kurze
Beschreibung mit dem wichtigsten Inhalt ­ unabhängig davon, ob Sie diese Aktion durch
ein weiteres Diagramm verfeinern oder nicht. Das hilft Ihnen, wenn Sie die Verfeinerung
nicht direkt durchführen, und es hilft den Lesern zu entscheiden, ob sie die Verfeinerung
betrachten müssen oder nicht.

** Use-Case-Diagramme
'Abb.4.7.png'

** Zustandsautomaten in der Analyse 
Use-Cases nicht nur mit Aktivitätsdiagrammen sondern auch mit Zustandsautomaten verfeinern
1. Use-Case durch Zustandsautomaten beschreiben
2. Kombination der enstanden Zustandsautomaten
'Abb.4.8.png'

** Das Begrifssmodell
Bei rein texuell und aplhabetisch Glossar geht der Zusammenhang verloren
Es bietet sich das Klassendiagramm an
- Klassen mit Attributen
- Assoziation & Aggregation
- Generalisierung
'Abb.4.7.png'

* Modellierungsszenarien
Im Folgenden trennen wir dazu zwischen dem Senden und Empfangen von Nachrichten, dem Auslösen
eines fachlichen Ablaufs und dem fachlichen Ablauf an sich (dem Ablauf eines Use­Cases).
Hinzu kommen noch die Interaktionen eines Benutzers mit dem System im Rahmen eines
fachlichen Ablaufs. Dies erreichen wir in den Modellierungsszenarien durch die Anwendung
von zwei Prinzipien:
- Die Aufgaben werden als einzelne Aktivitäten modelliert.
- Der Zusammenhang wird im Wesentlichen durch den Austausch von Signalen modelliert.
Einen Überblick über die potenziellen Zusammenhänge gibt Abbildung 4.10.
'Abb.4.10.png'

** Aufgaben von Systemschnitstellen
- Aufgbau von Nachrichten bzw. Ausehen un die Übergabeparameter bei einem extenren Operationsaufruf
- Rückmeldung des externen Systems ´über den korrekten Empfang einer Nachricht
- Fachlich über den Inhalt der gesendetnen Information
'Abb.4.11.png'
Die Persistierung wird zur Unterscheidung als Sterotyp gekennzeichnet

** Sendende Schnittstelle
*** Enge Kopplung
Das zusammenstellen der Nachricht hängt von externen Faktoren ab
Falls es zu einem Timeout kommt Problem sonst OK 
Abb.4.12
*** Lose Kopplung
Hier wird als Sterotyp <<Internes Ereignis>> gesetzt, im Schnitstellen Prozess und nicht im
fachlichem Ablauf wird die Fehlerbehandlung durchgeführt
Abb4.13

** Interaktion in Dialogen
Falls:
- Nutzer ändert angezeigt Werte
- Nutzer lost Aktion aus
- Externes System, liefert neue Daten
- Externes System, liefert neue Daten auf die regiert wird

** Modellierung von Services
<<Service>> fasst eine Menge von Diensten zusammen
BSP Interkation von Kundenverwaltung, Verkauf und Anmeledung
'Abb.4.21'

Es ist moglich eine Serviceoperations als Schnitstellen Operaiton der Komponente zu realisieren
Dadruch wird die zu realsierende Operation durch einer Aktivität Representiert
'Abb.4.22-23.png'

**** Modellierung der DTOs
Klassendiagramme werden beuntz um fachlich relevante Begriffe zu definieren

*Detailtiefe* Für die maximale Detaillierungstiefe gibt es eine
relativ einfache Regel: Gehen Sie maximal so tief, bis Sie eine Aktion
aus dem Aktivitätsdiagramm genau einer Komponente Ihres Systems
zuordnen können.


| Merkmale des Use-Cases           | Empfohlene Notation           | Referenz |
|----------------------------------+-------------------------------+----------|
| Kruze klare Abläufe              | Strukturierter Text           |          |
| Ablauf-, Schrittorientiert       | Aktivitätsdiagramm            | Kap. 13  |
| Einfach Daten oder Entities      | Kommunikationsdiagramm        | Kap. 16  |
| Komplexe Daten oder Entities     | Sequenzdiagramm               | Kap. 15  |
| Kein typischer Ablauf (Abfolgen) | Zustandsautomat               | Kap. 14  |
| Use-Case bündelt viele Szenarien | Interaktionsübersichtdiagramm | Kap. 18  |

248
