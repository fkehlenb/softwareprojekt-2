#+TITLE: plantuml

#+begin_src plantuml :file tryout.png
  Alice <- Bob: synchronous call
  Alice ->> Bob: asynchronous call
#+end_src

#+RESULTS:
[[file:tryout.png]]

* Onboarding eines Benutzers
Der Administrator erstellt einen Nutzer, das Backend fordert eine
Onboarding email an und der Nutzer meldet sich das erste mal an
#+BEGIN_SRC plantuml :file seq.png
    skinparam monochrome true
    Admin -> Backend: Create User Request
    Email <- Backend: Welcome Email Request
    User  <- Email: Welcome Email Response
    User ->  Backend: Verification Email Request
    Admin <- Backend: User Verified Response
    User ->  Backend: Authentication Request
    User ->  Backend: Access Control List Request
    User <-  Backend: Real Access Response
    User <-- Backend: another authentication Response
#+END_SRC

#+RESULTS:
[[file:seq.png]]

* Erstbenutzung
#+BEGIN_SRC plantuml :file erstbenutzung.png
autonumber
skinparam monochrome true

actor User as user
participant "Browser UI" as browser
participant "FacesContext" AS index
participant "Apache Shiro" as shiro
participant "Login Bean" as login
database "H2" as database

login <- index:  @LoginToContinue(\nloginPage = "/login.xhtml",\nuseForwardToLogin = false
login -> browser:
browser -> user
user -> user: Eingabe von Password und Username
user -> browser : Druck auf Login Knopf
browser -> login : Übermitellen an den Server TODO HTTP Delegation für jsf
login -> shiro: login()
shiro -> database: getPasswordForUser(username)
shiro <- database: return password
shiro -> shiro: Token TODO
shiro -> shiro: SecurityUtils.getSubject()
shiro -> shiro: currentUser.getSession()
shiro -> shiro: new UsernamePasswordToken()
shiro -> shiro: token.setRememberMe(true);
shiro -> shiro: currentUser.login(token)
index <-shiro:  externalContext.redirect(externalContext.getRequestContextPath() + path);\n TODO PATH?
index -> browser: Zeige korrekte Seite an
#+END_SRC


#+RESULTS:
[[file:erstbenutzung.png]]


* PKAdmin erstellt eine Prozesskette
#+BEGIN_SRC plantuml :file pkErstellen.png
autonumber
skinparam monochrome true


participant "PKAdminBean" as pkaB
participant "ProzessKettenVorlageController" as pkv
participant "AuftragController" as auftrag
participant "ProzessschrittVorlageController" as psv
participant "ProzessSchrittZustandsAutomatVorlageController" as psza
participant "auftraLogController" as aLog

  ==Erstellen Eines neuen Auftrages== 
note over pkaB : Technologe ruf TechnologeApp auf
note over pkaB: Techonologe wählt Vorlage
pkaB -> pkv : addProzessKettenVorlage(pkv:ProzessKettenVorlage)
note over pkv : Alle ProzessSchrritteVorlage anzeigen
pkv -> psv : getPSV()
note over psv : Technologe setzt alle gewünschten Eigenschaften
psv -> psv : setEs()
psv -> psv : setZustaende(psz:Set<ProzessSchrittZustand>)
psv -> psv :  setEingabeTraeger(Set<Traegerart>)
psv -> psv : setAusgabeTraeger(Set<Traegerart>)
psv -> psv : setProzessSchrittZustandsAutomat(\npsza:ProzessSchrittZustandsAutomat)
psv -> psv :  setProzessschrittArt(psa:ProzessSchrittArt)
psv -> b : add Bedinung (TODO) 
b -> b : add Parameters (TODO)
b -> pkv : get Bedinung
pkv -> pkaB : checkPK(ProzessKette pk)
pkaB -> auftrag : createAuftrag(ProzessKettenVorlage pkv)
auftrag -> auftrag : setPrio(KEINE)
note over auftrag : PkAdmin Kontrolliert den Auftrag 
auftrag -> auftrag : setPKZ(FREIGEGEBEN)
==Starten des Auftarges== 
note over auftrag : der Logistiker hat alle Proben und Träger zugewissen   
auftrag -> aLog : setPkset(GESTARTET)
aLog -> Auftrag : setStart(java.time.LocalDateTime)


#+END_SRC

#+RESULTS:
[[file:pkErstellen.png]]



* Probentransport Sequenzdiagramm
#+BEGIN_SRC plantuml :file probenTransport.png
actor Transport as t
participant "Transport APP" as tApp
participant Probe as p
participant Träger as träger
participant ExperimentierStation as es

tApp <- t: "Besuchen der Auftragsübersicht"
tApp -> t: "Anzeigen der Aufträge"
t -> t: "Auswählen eines Auftrages"
#+END_SRC

#+RESULTS:
[[file:probenTransport.png]]

* Grobe konzeptionelle Sicht
#+BEGIN_SRC plantuml :file grobeSicht.png
package "Datenbank System " as dbSys {
database "H2 Datenbank" as db
}

package "Server Wildfly" as server{
[Persistenz] as per
[Geschäftslogik] as gl
[Controller] as cont
[Presentationsicht] as pres
[REST API] as rest
[User Interface] as ui
}
db -0)- per: "SQL"
db -(0- per: "    SQL"
per - gl: JPA
gl -- cont: Applies
cont -- pres: Views & Request

per -- rest: JPA
rest -- restClient: HTTPs Request/Response

pres -- ui: Request
ui == Client: HTTPs Request/Response
#+END_SRC

#+RESULTS:
[[file:grobeSicht.png]]

* Konzeptionelle Sicht


#+BEGIN_SRC plantuml :file konzeptionelleSicht.png
skinparam linetype polyline
package "Server Wildfly" as server{
together {
  [Persistenz] as per
  [Geschäftslogik] as gl
  [Model] as model
}
[User Interface] as ui

}

database "H2 Datenbank" as db

package "Client System" as ext {
actor "Client" as client
}

model -left(0- gl: "Daten"
model -right0)- per: "Representation"
model -right(0- per: "Speicher"
model -up0)-- ui: Daten
model -up(0-- ui: "   Kontrolle"

ui -(0- per: "Datei Behandlung"
ui -(0- gl: " Model Analyse"

db --up0)- per: "  JDBC  "


ui -up(0- ext: "HTTP Request"
ui -up0)- ext: "   HTTP Response"
#+END_SRC

#+RESULTS:
[[file:konzeptionelleSicht.png]]


** example
#+BEGIN_SRC plantuml :file ex.png
hide empty members
Parent o-- "0..1"ReferedTo : ref
Parent *-- "0..1" Child : child
Grandparent --|> Parent : extends
#+END_SRC

#+RESULTS:
[[file:ex.png]]

* Datenmodel

Die Ausgabe von ProzessSchritt n muss kompatibel zu Eingabe ProzessSchritt m
sein: Steht steht in der Vorlage


User hat bis zu n Rollen
Eine Rolle existiert nicht ohne User
Ein Auftrag ist eine instanzierte Prozesskette
Eine Prozesskette wird von einer PkV erzeugt, die Prozesskettentemplate, kann hierbei
gespeichert werden
Ein Träger hat eine Art
Die Trägerart hat getter und Setter
Eine Experimentierstation soll die Dauer der Queue berechnen
#+BEGIN_SRC plantuml :file datenModel.png
skinparam monochrome true
skinparam componentStyle uml2
skinparam linetype ortho
skinparam classAttributeIconSize 0


hide empty members

package Datenmodell {
  enum Role {
  TECHNOLOGE
  PKADMIN
  TRANSPORT
  LOGISTIKER
  ADMIN
}

class User {
  +id: int
  +vorname: String
  +nachname: String
  +email: String
  +telefonnummer: String
  +username: String
  +password: Byte[]
  +wurdeVerifiziert: boolean
  +erstellungsDatum: java.time.LocalTimeDate
}


class Probe {
  +probenID: String
  +kommentar: Pair<java.time.LocalTimeDate, String>
  +zustand: enum["KAPPUTT", "VERLOREN", "VORHANDEN"]
}

class Standort {
  +ort: String
}

class Traeger {
  +id: int
  +current: String
}

class TraegerArt {
  +arten: Set<String>
}

class Archiv {
  +auftrag: Auftrag
  +datum: java.time.LocalTimeDate
}

class "QualitativeEigenschaft" as qualE {
  +name: String
}

class "QuantitativeEigenschaft" as quantE {
  +wert: java.lang.Number
  +einheit: si.uom.si
}

class "ProzessSchritt" as ps {
  +psID: int
  +uploaded: bool
  +current: Experimentierstation
  +ZustandsAutomat: String
  +station : Experimentierstation
}

class ProzessSchrittLog {
  +gestartet: java.time.LocalDateTime
  +geendet: java.time.LocalDateTime
  +psZustandsAutomat: String
}

class ProzessSchrittZustandsAutomat {
  +current:+String
}

class ProzessSchrittZustandsAutomatVorlage {
   +zustände: Set<String>
}

class "ProzessSchrittVorlage" as psV {
  +psVID: int
  +zustaende: Set<ProzessKettenZustandsAutomat>
  +dauer: java.time.Duration
  +eingabeTraeger: Set<TraegerArt>
  +ausgabeTraeger: Set<TraegerArt>
}

class ProzessSchrittArt {
  +psArt: Set<String>
}

 class TransportAuftrag {
   +ZustandsAutomat: enum["ABGEHOLT", "ABGELIEFERT"]
}

 class "ProzessSchrittParameter" as pp {
    +name: String
  }


class Auftrag {
  +pkID:int
}

class AuftragsLog {
  +start: java.time.LocalDate
  +beeendet: java.time.LocalDate
  +archiviert: java.time.LocalDate
}


enum AuftragsPriorität {
KEINE
ETWAS
VIEL
HOCH
SEHR HOCH
}

class "ProzessKettenVorlage" as pkV {
    +pkKID: int
}

enum "ProzessKettenZustandsAutomat" as pkZ {
    INSTANZIERT
    FREIGEBEN
    GESTARTET
    ABGEBROCHEN
    DURCHGEFÜHRT
}

class Bedingung {
  +param: Set<ProzessSchrittParameter>
  +eigenschaften: Set<QualitativeEigenschaft>
}

class "ExperimentierStation" as es {
  +esID: int
  +standort: String
  +status: enum ["verfügbar", "besetzt", kaputt]
  +nextPS: Queue<ProzessSchritt>
}



  User "0..*" -left- "1..*" Role
  User "*" -- "*" es: hat >


  Auftrag "*" -* "1" AuftragsPriorität
  Auftrag "1" -* "1..*" ps: hat >
  Auftrag "*"  --* "1" AuftragsLog: hat >
  Auftrag "*" -- "1" pkZ: hat >
  Auftrag "*" -- "1" pkV: < erstellt von

  (Auftrag, ps) .. Traeger


  ps "*" -- "1" psV: < erstellt von
  ps "1"-- "1" ProzessSchrittLog:  hat >
  ps "*" -- "1" ProzessSchrittZustandsAutomat: hat >
  ps "*" -- "1" TransportAuftrag: hat >


  psV "*" --  "1" ProzessSchrittArt: hat >
  psV "1" -- "1..*" pp: hat >
  psV "*" --"1..*" es: hat >
  psV "1" -- "*" ProzessSchrittZustandsAutomat: hat >

  (psV, es) .. Bedingung

 ProzessSchrittZustandsAutomatVorlage "1" -- "*" ProzessSchrittZustandsAutomat: < hat

 Traeger "*" -- "1" TraegerArt: hat >
 Traeger "0..1" -- "0..*" Probe: hat >
 Traeger "*" -- "1" Standort: hat >

  pkV "*" -- "1..*" psV: hat >


  Probe "0..1" *- "0..1" Archiv
  Probe "*" -- "1" Standort: hat >
  Probe "*" -- "*" qualE: hat >

  pp "*" o-down- "*" qualE: besteht aus >


  quantE --|> qualE

}
#+END_SRC

#+RESULTS:
[[file:datenModel.png]]
file:datenModel.png
