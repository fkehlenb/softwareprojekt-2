#+TITLE: plantuml

#+begin_src plantuml :file tryout.png
  Alice <- Bob: synchronous call
  Alice ->> Bob: asynchronous call
#+end_src

#+RESULTS:
[[file:tryout.png]]

* Onboarding eines Benutzers
Der Administrator erstellt einen Nutzer, das Backend fordert eine
Onboarding email an und der Nutzer meldet sich das erste mal an
#+BEGIN_SRC plantuml :file seq.png
    skinparam monochrome true
    Admin -> Backend: Create User Request
    Email <- Backend: Welcome Email Request
    User  <- Email: Welcome Email Response
    User ->  Backend: Verification Email Request
    Admin <- Backend: User Verified Response
    User ->  Backend: Authentication Request
    User ->  Backend: Access Control List Request
    User <-  Backend: Real Access Response
    User <-- Backend: another authentication Response
#+END_SRC

#+RESULTS:
[[file:seq.png]]

* Erstbenutzung
#+BEGIN_SRC plantuml :file erstbenutzung.png
autonumber
skinparam monochrome true

actor User as user
participant "Browser UI" as browser
participant "Home Page" as home_page

user -> browser : Besuchen Sie die Login-Seite der DataColorrado-Benutzeroberfläche.
browser -> home_page : Rufen Sie die Anmeldeseite der  DataColorrado-Benutzeroberfläche auf.
browser <- home_page : Geben Sie die Anmeldeseite mit dem Formularfeld Benutzername und Passwortzurück.
user <- browser : Seite anzeigen, auf Benutzereingaben warten
Benutzer -> Benutzer: Abruf von Benutzername und Passwort aus dem Speicher
user -> browser : Füllen Sie das Feld Benutzername und Passwort aus und klicken Sie auf die Schaltfläche Senden.
browser -> home_page : Senden Sie den Benutzernamen und das Passwort.
home_page -> home_page : Überprüfen Sie, ob die Informationen gültig sind.
alt Login gültig
    browser <- home_page : Gibt die eingeloggte Seite zurück
    user <- browser : Anzeige der angemeldeten Seite
else Login ungültig
    browser <- home_page : Rückgabe der Login-Fehlerseite
    user <- browser : Anzeige der Login-Fehlerseite
end
#+END_SRC


#+RESULTS:
[[file:erstbenutzung.png]]


* PKAdmin erstellt eine Prozesskette
#+BEGIN_SRC plantuml :file pkErstellen.png
autonumber
skinparam monochrome true

actor Technologr:nnen as t
actor Logitisker:Innen as l
participant "Prozesskette" as pk
participant "Auftrag als" as a
participant "Technolgen App" tApp

t -> tApp: Aufruf vorhandener Vorlagen


#+END_SRC

#+RESULTS:
[[file:pkErstellen.png]]



* Konzeptionelle Sicht
#+BEGIN_SRC plantuml :file konzeptionelleSicht.png
database "H2 Datenbank" as db
package "Server Wildfly" as server{
[Persistenz] as per
[Geschäftslogik] as gl
[Controller] as cont
[Presentationsicht] as pres
[REST API] as rest
[User Interface] as ui
}
db == per: SQL
per - gl: JPA
gl -- cont: Applies
cont -- pres: Views & Request

per -- rest: JPA
rest -- restClient: HTTPs Request/Response

pres -- ui: Request
ui == Client: HTTPs Request/Response
#+END_SRC

#+RESULTS:
[[file:konzeptionelleSicht.png]]
<<<<<<< HEAD


** example
#+BEGIN_SRC plantuml :file ex.png
hide empty members
Parent o-- "0..1"ReferedTo : ref
Parent *-- "0..1" Child : child
Grandparent --|> Parent : extends
#+END_SRC

#+RESULTS:
[[file:ex.png]]

#+BEGIN_SRC plantuml :file datenModel.png
skinparam monochrome true
skinparam componentStyle uml2

hide empty members

package Datenmodel {
  class Role {
  }

  class Logistiker {
  +logID: int
  }

  class User {
    +id: int
    +vorname: String
    +nachname: String
    +email: String
    +telefonnummer: String
    +username: String
    +password: String
    +wurdeVerifiziert: boolean
    +erstellungsDatum: java.util.Date
  }

  class Admin {
    +adminID: int
  }


  class "Technologe" as t {
    +TID: int
  }

  class "Transport" as transport {
    +transportID: int
  }

  class Probe {
    +probenID: int
    +öffentlicheProbenID: String
    +unbrauchbar: Boolean
  }

  class Träger {
    +id: int
    +standort: Standort
  }

  enum Trägerart {
    eingebettet
    einzelen
    glass
  }

  class "QualitativeEigenschaft" as qualE {
    +name: String
    +hat: Boolean
  }

  class "QuantitativeEigenschaft" as quantE {
    +name: String
    +wert: java.lang.Number
    +einheit: java.units.SI
  }

  together {
    class "Prozessschritt" as ps {
      +psID: int
    }

    class "ProzessschrittVorlage" as psV {
      +psVID: int
    }

    class "ProzessParameter" as pp {
      +name: String
      +wert: java.lang.Number
      +einheit: java.util.SI
    }
  }

  together {
    class "ProzesskettenAdministrator" as pkAdmin {
      +pkAdminID: int
    }


    class "Prozesskette" as pk {
      +priorität: enum
      +pkID:int
      +pkZustand: enum
    }

    class "ProzessketteVorlage" as pkV {
      +pkKID: int
    }

    class "ProzesskettenZustand" as pkZ {
      +pkStatus: enum("Instanziert", "Freigeben", "Abgebrochen")
    }
  }

  class "ExperimentierStation" as es {
    +esID: int
    +standort: String
    +status: boolean
    +kaputt: boolean
  }

  class "Randbedingung" as rb {
    +pre: List<ProzessParameter>
    +post: List<ProzessParameter>
  }

  class JSONObject {
    +JSONPS: JSONArray
    +PSObejct: JSONObject
  }

  Role <|-left- Logistiker
  Role "0..*"-left-"1..*" User
  Role <|-right- Admin
  Role <|-right- t
  Role <|-- transport

  Logistiker "1" -- Probe
  Logistiker "1" -- "1..*" Träger
  Probe o-- "0..*"quantE : besitzt
  Probe o-- "0..*"qualE : besitzt
  Trägerart"1" --o "1.." Träger
  Probe "0..*"--o "0..1" Träger

  Admin "1" -- "1..*" User

  Role <|-- pkAdmin
  pkAdmin "1" -- psV

  psV -- Trägerart
  ps "1"--"1" psV
  ps "1..*" -- "0..*" pk

  pkV "1" -- "1" ps
  pkV "1..*" -- "1..*" pk

  pk "1" -- "1" pkZ
  pk -- Träger
  pk -- "1" t

  ps "1..*" -- "1..*" pp
  pp o-- "1..*" qualE: besitzt
  pp o-- "1..*" quantE: besitzt

  es "0..*" -- "1" Admin
  es "1" -- "0..*" psV
  es "0..*" -- "1" t

  transport "1" -- pk

  rb "0..*" --o ps

  t "1" -down- "0..*" JSONObject

  pkAdmin "0..n" -- "1" Auftrag
  pkV "1" --o Auftrag
}
#+END_SRC

#+RESULTS:
[[file:datenModel.png]]
